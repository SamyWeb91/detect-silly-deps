{
  "boolean": {
    "is-odd": "num % 2 !== 0",
    "is-even": "num % 2 === 0",
    "is-true": "value === true",
    "is-false": "value === false",
    "is-null": "value === null",
    "is-undefined": "value === undefined",
    "is-truthy": "!!value",
    "is-falsy": "!value",
    "is-nil": "value == null",
    "is-empty": "Object.keys(value).length === 0",
    "is-exists": "value !== undefined",
    "is-valid": "value !== null && value !== undefined",
    "is-invalid": "value === null || value === undefined",
    "true": "true",
    "false": "false"
  },
  "math": {
    "add": "a + b",
    "subtract": "a - b",
    "multiply": "a * b",
    "divide": "a / b",
    "is-positive": "num > 0",
    "is-negative": "num < 0",
    "is-zero": "num === 0",
    "is-greater-than": "a > b",
    "is-less-than": "a < b",
    "increment": "num + 1",
    "decrement": "num - 1",
    "sum": "arr.reduce((a, b) => a + b, 0)",
    "average": "arr.reduce((a, b) => a + b, 0) / arr.length",
    "square": "num * num",
    "cube": "num ** 3",
    "clamp": "Math.min(Math.max(val, min), max)",
    "round": "Math.round(num)",
    "ceil": "Math.ceil(num)",
    "floor": "Math.floor(num)",
    "max": "Math.max(...arr)",
    "min": "Math.min(...arr)"
  },
  "string": {
    "left-pad": "str.padStart(length, char)",
    "right-pad": "str.padEnd(length, char)",
    "to-upper-case": "str.toUpperCase()",
    "to-lower-case": "str.toLowerCase()",
    "trim-string": "str.trim()",
    "trim-left": "str.trimStart()",
    "trim-right": "str.trimEnd()",
    "string-length": "str.length",
    "reverse-string": "str.split('').reverse().join('')",
    "is-string-empty": "str.length === 0",
    "string-concat": "str1 + str2",
    "char-at": "str.charAt(index)",
    "starts-with": "str.startsWith(substr)",
    "ends-with": "str.endsWith(substr)",
    "string-replace": "str.replace(search, replace)",
    "string-split": "str.split(separator)",
    "capitalize": "str.charAt(0).toUpperCase() + str.slice(1)",
    "camel-case": "str.replace(/[-_\\s]+(.)?/g, (_, c) => c ? c.toUpperCase() : '')",
    "kebab-case": "str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase().replace(/\\s+/g, '-')",
    "snake-case": "str.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase().replace(/\\s+/g, '_')",
    "contains": "str.includes(sub)",
    "repeat": "str.repeat(n)"
  },
  "array": {
    "array-first": "arr[0]",
    "array-last": "arr[arr.length - 1]",
    "array-length": "arr.length",
    "array-flatten": "arr.flat()",
    "array-includes": "arr.includes(item)",
    "array-filter": "arr.filter(fn)",
    "array-map": "arr.map(fn)",
    "array-reduce": "arr.reduce(fn, initial)",
    "array-some": "arr.some(fn)",
    "array-every": "arr.every(fn)",
    "array-find": "arr.find(fn)",
    "array-join": "arr.join(separator)",
    "array-slice": "arr.slice(start, end)",
    "array-sort": "arr.sort(fn)",
    "array-reverse": "arr.reverse()",
    "array-concat": "arr1.concat(arr2)",
    "array-push": "arr.push(item)",
    "array-pop": "arr.pop()",
    "array-shift": "arr.shift()",
    "array-unshift": "arr.unshift(item)",
    "array-is-array": "Array.isArray(arr)",
    "unique": "[...new Set(arr)]",
    "chunk": "arr.reduce((res, _, i) => (i % size === 0 ? res.push(arr.slice(i, i + size)) : res, res), [])",
    "compact": "arr.filter(Boolean)",
    "intersection": "arr1.filter(x => arr2.includes(x))",
    "difference": "arr1.filter(x => !arr2.includes(x))",
    "zip": "arr1.map((v, i) => [v, arr2[i]])"
  },
  "object": {
    "object-keys": "Object.keys(obj)",
    "object-values": "Object.values(obj)",
    "object-entries": "Object.entries(obj)",
    "object-has-own": "Object.hasOwnProperty.call(obj, prop)",
    "object-assign": "Object.assign({}, obj)",
    "object-freeze": "Object.freeze(obj)",
    "object-is-frozen": "Object.isFrozen(obj)",
    "object-merge": "{...obj1, ...obj2}",
    "object-clone": "JSON.parse(JSON.stringify(obj))",
    "object-size": "Object.keys(obj).length",
    "object-is-empty": "Object.keys(obj).length === 0",
    "omit": "Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k)))",
    "pick": "Object.fromEntries(Object.entries(obj).filter(([k]) => keys.includes(k)))"
  },
  "function": {
    "noop": "() => {}",
    "identity": "x => x",
    "constant": "x => () => x",
    "compose": "fns.reduce((f, g) => (...args) => f(g(...args)))",
    "pipe": "fns.reduce((f, g) => (...args) => g(f(...args)))",
    "curry": "fn => (...args) => args.length >= fn.length ? fn(...args) : curry(fn.bind(null, ...args))",
    "memoize": "fn => { const cache = {}; return (...args) => { const key = JSON.stringify(args); return cache[key] || (cache[key] = fn(...args)); }; }",
    "debounce": "(fn, delay) => { let timer; return (...args) => { clearTimeout(timer); timer = setTimeout(() => fn(...args), delay); }; }",
    "throttle": "(fn, delay) => { let lastCall = 0; return (...args) => { const now = Date.now(); if (now - lastCall < delay) return; lastCall = now; return fn(...args); }; }",
    "once": "fn => { let called = false, result; return (...args) => { if (!called) { called = true; result = fn(...args); } return result; }; }"
  },
  "promise": {
    "promise-resolve": "Promise.resolve(value)",
    "promise-reject": "Promise.reject(error)",
    "promise-all": "Promise.all(promises)",
    "promise-race": "Promise.race(promises)",
    "promise-timeout": "(promise, ms) => Promise.race([promise, new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), ms))])",
    "promise-retry": "(fn, retries = 3, delay = 1000) => fn().catch(err => retries <= 0 ? Promise.reject(err) : new Promise(resolve => setTimeout(() => resolve(promiseRetry(fn, retries - 1, delay)), delay)))"
  },
  "date": {
    "is-date": "obj instanceof Date",
    "date-now": "Date.now()",
    "date-get-time": "date.getTime()",
    "date-get-year": "date.getFullYear()",
    "date-get-month": "date.getMonth()",
    "date-get-day": "date.getDay()",
    "date-get-hours": "date.getHours()",
    "date-get-minutes": "date.getMinutes()",
    "date-get-seconds": "date.getSeconds()",
    "date-format": "date.toISOString()",
    "date-diff": "(date1, date2) => date1.getTime() - date2.getTime()",
    "add-days": "(date, days) => new Date(date.getTime() + days * 86400000)",
    "diff-days": "(a, b) => Math.floor((b - a) / 86400000)",
    "format-date": "date => date.toISOString().split('T')[0]"
  },
  "type": {
    "is-function": "typeof value === 'function'",
    "is-object": "typeof value === 'object' && value !== null",
    "is-symbol": "typeof value === 'symbol'",
    "is-buffer": "Buffer.isBuffer(value)",
    "is-stream": "value !== null && typeof value === 'object' && typeof value.pipe === 'function'",
    "is-error": "value instanceof Error",
    "is-regexp": "value instanceof RegExp",
    "is-map": "value instanceof Map",
    "is-set": "value instanceof Set",
    "is-weakmap": "value instanceof WeakMap",
    "is-weakset": "value instanceof WeakSet",
    "is-promise": "value && typeof value.then === 'function'"
  },
  "util": {
    "uuid": "crypto.randomUUID()",
    "random-int": "Math.floor(Math.random() * (max - min + 1)) + min",
    "random-float": "Math.random() * (max - min) + min",
    "random-item": "arr[Math.floor(Math.random() * arr.length)]",
    "random-bool": "Math.random() >= 0.5",
    "sleep": "ms => new Promise(resolve => setTimeout(resolve, ms))",
    "try-catch": "async fn => { try { return [null, await fn()]; } catch (err) { return [err, null]; } }",
    "json-parse": "JSON.parse(str)",
    "json-stringify": "JSON.stringify(obj)",
    "deep-clone": "JSON.parse(JSON.stringify(obj))",
    "times": "(n, fn) => Array.from({ length: n }, (_, i) => fn(i))",
    "range": "(start, end) => Array.from({ length: end - start }, (_, i) => start + i)"
  },
  "nextjs": {
    "next-head": "import Head from 'next/head';\n<Head>\n  <title>Mi página</title>\n  <meta name=\"description\" content=\"Descripción\" />\n</Head>",
    "next-router": "import { useRouter } from 'next/router';\nconst router = useRouter();\nrouter.push('/ruta')",
    "next-cookies": "// En API route:\nimport { serialize } from 'cookie';\nres.setHeader('Set-Cookie', serialize('name', 'value', { path: '/' }));",
    "next-config-plugin": "// next.config.js\nmodule.exports = {\n  webpack: (config) => {\n    // Modificar config\n    return config;\n  }\n}",
    "next-compose-plugins": "// Configuración manual en next.config.js\nconst withPlugins = require('next-compose-plugins');\n// Reemplazar con:\nmodule.exports = {\n  // configuración directa\n}",
    "next-optimized-images": "// Next.js 12+ tiene optimización automática\n// Usar <Image> de next/image\nimport Image from 'next/image';\n<Image src=\"/img.png\" width={500} height={500} />",
    "next-fonts": "// next.config.js\nmodule.exports = {\n  experimental: {\n    optimizeFonts: true\n  }\n}"
  },
  "react-next": {
    "react-helmet": "import Head from 'next/head';\n<Head>\n  <title>Mi título</title>\n</Head>",
    "react-router-dom": "import { useRouter } from 'next/router';\nconst router = useRouter();\nrouter.push('/ruta');",
    "react-syntax-highlighter": "import { Prism as SyntaxHighlighter } from 'prism-react-renderer';\n<SyntaxHighlighter language=\"jsx\">{code}</SyntaxHighlighter>",
    "react-modal": "const Modal = ({ children }) => {\n  return ReactDOM.createPortal(\n    children,\n    document.getElementById('modal-root')\n  );\n}",
    "react-tooltip": ".tooltip {\n  position: relative;\n}\n.tooltip:hover::after {\n  content: attr(data-tooltip);\n  position: absolute;\n  /* estilos */\n}",
    "react-lazy-load": "import dynamic from 'next/dynamic';\nconst Component = dynamic(() => import('./Component'), { ssr: false });",
    "react-google-maps": "<script src=\"https://maps.googleapis.com/maps/api/js?key=API_KEY\"></script>\n<div id=\"map\" style={{ height: '400px' }}></div>"
  },
  "css-in-js": {
    "styled-components": "// styles.module.css\n.container {\n color: var(--primary);\n}\n// Componente\nimport styles from './styles.module.css';\n<div className={styles.container}>",
    "emotion": "<div style={{ color: 'red' }}>Contenido</div>",
    "theme-ui": ":root {\n  --primary: #0070f3;\n}\n.container {\n  color: var(--primary);\n}"
  },
  "utils-next": {
    "next-i18next": "// pages/_app.js\nimport { appWithTranslation } from 'next-translate';\nexport default appWithTranslation(MyApp);",
    "next-auth": "// pages/api/auth/[...nextauth].js\nimport NextAuth from 'next-auth';\nexport default NextAuth({ providers: [...] });",
    "next-pwa": "// next.config.js\nmodule.exports = {\n  pwa: {\n    dest: 'public',\n    register: true,\n    skipWaiting: true\n  }\n}"
  },
  "performance": {
    "loadable-components": "import dynamic from 'next/dynamic';\nconst Component = dynamic(() => import('./Component'));",
    "quicklink": "<Link href=\"/about\" prefetch>\n  <a>About</a>\n</Link>"
  },
  "new-modules": {
    "lodash.get": "const value = obj?.nested?.property;",
    "classnames": "const classes = `btn ${isActive ? 'active' : ''}`;",
    "query-string": "const params = new URLSearchParams(location.search);\nconst id = params.get('id');",
    "axios": "const res = await fetch('/api/data');\nconst data = await res.json();",
    "moment": "new Date().toLocaleDateString('es-ES');\n// O\nnew Intl.DateTimeFormat('es-ES').format(new Date());",
    "uuid": "const id = crypto.randomUUID(); // Disponible en Node 16+ y navegadores modernos"
  }
}
